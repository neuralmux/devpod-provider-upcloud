name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Copy server plans for embedding
        run: cp configs/server-plans.yaml pkg/config/

      - name: Run tests before release
        run: make test-all
        env:
          UPCLOUD_USERNAME: test
          UPCLOUD_PASSWORD: test
          UPCLOUD_ZONE: de-fra1
          UPCLOUD_PLAN: DEV-2xCPU-4GB
          UPCLOUD_STORAGE: "50"
          UPCLOUD_IMAGE: "Ubuntu Server 22.04 LTS (Jammy Jellyfish)"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare provider.yaml with version and placeholders
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}

          # Update version in provider.yaml
          sed -i "s/version: .*/version: $VERSION/" provider.yaml

          # Ensure placeholders are in provider.yaml for checksums
          # These will be replaced after GoReleaser builds the binaries

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        id: goreleaser
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate checksums and update provider.yaml
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}

          # Function to calculate SHA256
          calc_sha256() {
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$1" | awk '{print $1}'
            else
              shasum -a 256 "$1" | awk '{print $1}'
            fi
          }

          # Calculate checksums from the built binaries
          cd dist

          # Find and calculate checksums for each platform
          LINUX_AMD64_SHA=""
          LINUX_ARM64_SHA=""
          DARWIN_AMD64_SHA=""
          DARWIN_ARM64_SHA=""
          WINDOWS_AMD64_SHA=""

          # Linux AMD64
          if [ -f "devpod-provider-upcloud_linux_amd64_v1/devpod-provider-upcloud" ]; then
            LINUX_AMD64_SHA=$(calc_sha256 "devpod-provider-upcloud_linux_amd64_v1/devpod-provider-upcloud")
          fi

          # Linux ARM64
          if [ -f "devpod-provider-upcloud_linux_arm64/devpod-provider-upcloud" ]; then
            LINUX_ARM64_SHA=$(calc_sha256 "devpod-provider-upcloud_linux_arm64/devpod-provider-upcloud")
          fi

          # Darwin AMD64
          if [ -f "devpod-provider-upcloud_darwin_amd64_v1/devpod-provider-upcloud" ]; then
            DARWIN_AMD64_SHA=$(calc_sha256 "devpod-provider-upcloud_darwin_amd64_v1/devpod-provider-upcloud")
          fi

          # Darwin ARM64
          if [ -f "devpod-provider-upcloud_darwin_arm64/devpod-provider-upcloud" ]; then
            DARWIN_ARM64_SHA=$(calc_sha256 "devpod-provider-upcloud_darwin_arm64/devpod-provider-upcloud")
          fi

          # Windows AMD64
          if [ -f "devpod-provider-upcloud_windows_amd64_v1/devpod-provider-upcloud.exe" ]; then
            WINDOWS_AMD64_SHA=$(calc_sha256 "devpod-provider-upcloud_windows_amd64_v1/devpod-provider-upcloud.exe")
          fi

          cd ..

          # Update URLs and checksums in provider.yaml directly
          sed -i "s|##VERSION##|$TAG|g" provider.yaml
          sed -i "s|##CHECKSUM_LINUX_AMD64##|$LINUX_AMD64_SHA|g" provider.yaml
          sed -i "s|##CHECKSUM_LINUX_ARM64##|$LINUX_ARM64_SHA|g" provider.yaml
          sed -i "s|##CHECKSUM_DARWIN_AMD64##|$DARWIN_AMD64_SHA|g" provider.yaml
          sed -i "s|##CHECKSUM_DARWIN_ARM64##|$DARWIN_ARM64_SHA|g" provider.yaml
          sed -i "s|##CHECKSUM_WINDOWS_AMD64##|$WINDOWS_AMD64_SHA|g" provider.yaml

          echo "Provider.yaml updated with checksums"

      - name: Upload provider.yaml to release
        uses: softprops/action-gh-release@v1
        with:
          files: provider.yaml
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Notify on success
        if: needs.release.result == 'success'
        run: |
          echo "üéâ Release successful! New version is now available."
          echo "Users can install with: devpod provider add github.com/neuralmux/devpod-provider-upcloud@${GITHUB_REF#refs/tags/}"
          echo "Or use the quick start script:"
          echo "curl -fsSL https://raw.githubusercontent.com/neuralmux/devpod-provider-upcloud/main/quickstart.sh | bash"

      - name: Notify on failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed. Please check the logs and try again."
